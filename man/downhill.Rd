% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/turtle-functions.R
\docType{methods}
\name{downhill}
\alias{downhill}
\alias{downhill,NLworld,missing,SpatialPointsDataFrame,numeric-method}
\alias{downhill,NLworldStack,character,SpatialPointsDataFrame,numeric-method}
\title{Move downhill}
\usage{
downhill(world, pVar, turtles, nNeighbors, torus = FALSE)

\S4method{downhill}{NLworld,missing,SpatialPointsDataFrame,numeric}(world,
  turtles, nNeighbors, torus)


  \S4method{downhill}{NLworldStack,character,SpatialPointsDataFrame,numeric}(world,
  pVar, turtles, nNeighbors, torus = FALSE)
}
\arguments{
\item{world}{NLworlds object.}

\item{pVar}{Character. If the \code{world} is a NLworldStack object, \code{pVar}
is the name of the layer to use to define the patches values.
\code{pVar} must not be provided if the \code{world} is a NLworld object.}

\item{turtles}{SpatialPointsDataFrame created by \code{createTurtles()} or
by \code{createOTurtles()} representing the moving agents.}

\item{nNeighbors}{Integer: 4 or 8. Represents the number of neighbor patches
considered.}

\item{torus}{Logical to determine if the \code{world} is wrapped. Default is
\code{torus = FALSE}.}
}
\value{
SpatialPointsDataFrame representing the \code{turtles} with updated
        coordinates and updated data for their "heading" values and
        previous coordinates "prevX"
        and "prevY".
}
\description{
Move the \code{turtles} to their neighboring patch with the lowest value.
}
\details{
If no neighboring patch has a smaller value than the patch where the
         turtle is currently located on, the turtle stays on this patch. It still
         moves to the patch center if it was not already on it.

         If there are multiple neighboring patches with the same lowest value,
         the turtle chooses one patch randomly.

         If a turtle is located on a patch on the edge
         of the \code{world} and \code{torus = FALSE}, it has fewer
         neighborhing patches as options to move than \code{nNeighbors}; if
         \code{torus = TRUE}, the turtle can move on the other side of the \code{world} to
         move downhill and its choice of neighborhing patches is always equals to
         \code{nNeighbors}.
}
\examples{
w1 <- createNLworld(minPxcor = 1, maxPxcor = 10, minPycor = 1, maxPycor = 10)
w1 <- set(world = w1, agents = patches(w1), val = runif(count(patches(w1))))
t1 <- createTurtles(n = 10, coords = randomXYcor(w1, n = 10))

library(SpaDES)
clearPlot()
Plot(w1)
Plot(t1, addTo = "w1")

t1 <- downhill(world = w1, turtles = t1, nNeighbors = 8)
Plot(t1, addTo = "w1")


}
\author{
Sarah Bauduin
}
\references{
Wilensky, U. 1999. NetLogo. http://ccl.northwestern.edu/netlogo/.
            Center for Connected Learning and Computer-Based Modeling,
            Northwestern University. Evanston, IL.
}
\seealso{
\url{https://ccl.northwestern.edu/netlogo/docs/dictionary.html#downhill}
}

